@page "/clubs"

@using TransfermarktScraper.Domain.DTOs.Response
@using TransfermarktScraper.Web.Clients.Interfaces
@using TransfermarktScraper.Web.Services.Interfaces

@attribute [StreamRendering(true)]

@implements IRefreshablePage

@inject IClubClient ClubClient
@inject ICompetitionClient CompetititonClient
@inject INavigationHistoryService NavigationHistoryService
@inject IItemSelectionService ItemSelectionService
@inject IPageReferenceService PageReferenceService


<PageTitle>Clubs</PageTitle>

@if (clubs == null)
{
	<MudText HtmlTag="em">Scraping clubs please wait...</MudText>
}
else
{
	<MudGrid>
		<MudItem xs="2">
			<MudTextField Label="Search competitions..."
						  @bind-Value="SearchedCompetition"
						  Adornment="Adornment.Start"
						  AdornmentIcon="@Icons.Material.Filled.Search"
						  Immediate="true" />
		</MudItem>
		<MudSpacer />
		<MudItem xs="2" Class="d-flex justify-end">
			<MudButton Color="Color.Primary"
					   FullWidth="true"
					   Size="Size.Large"
					   Variant="Variant.Filled"
					   OnClick="SelectAllClubs">
				Select All
			</MudButton>
		</MudItem>
		<MudItem xs="2" Class="d-flex justify-end">
			<MudButton Color="Color.Primary"
					   FullWidth="true"
					   Size="Size.Large"
					   Variant="Variant.Filled"
					   Disabled="!selectedClubs.Any()"
					   OnClick="NavigateToPlayers">
				Scrape players
			</MudButton>
		</MudItem>
	</MudGrid>

	<MudList Dense="true" Gutters="true" T="CompetitionResponse" Class="mt-6">
		@foreach (var competition in filteredCompetitions)
		{
			<MudListItem Ripple="false">
				<MudListSubheader @onclick="() => ToggleCompetitionExpansion(competition)">
					<MudStack Row="true" AlignItems="AlignItems.Center">
						<MudAvatar Size="Size.Large" Class="mt-2">
							<MudImage Src="@competition.Logo" Alt="@competition.Name" />
						</MudAvatar>
						<MudSpacer />
						<MudText Typo="Typo.h6">@competition.Name</MudText>
						<MudSpacer />
						<MudIcon Icon="@(expandedCompetitions.Contains(competition) ? Icons.Material.Filled.ArrowDropUp : Icons.Material.Filled.ArrowDropDown)"
								 Color="Color.Primary"
								 Size="Size.Large" />
					</MudStack>
				</MudListSubheader>

				<MudCollapse Expanded="@expandedCompetitions.Contains(competition)">
					<MudDataGrid T="ClubResponse"
								 Dense="true"
								 Hover="true"
								 Filterable="false"
								 MultiSelection="true"
								 ColumnResizeMode="ResizeMode.None"
								 @bind-SelectedItems="@selectedClubs"
								 @key="competition.TransfermarktId"
								 SelectOnRowClick="true"
								 Items="@GetClubs(competition)">
						<Columns>
							<SelectColumn T="ClubResponse" />
							<TemplateColumn T="ClubResponse" Context="club" Title="Crest">
								<CellTemplate>
									<MudAvatar>
										<MudImage Src="@club.Item.Crest" Alt="@club.Item.Name" />
									</MudAvatar>
								</CellTemplate>
							</TemplateColumn>
							<TemplateColumn T="ClubResponse" Context="club" Title="Name">
								<CellTemplate>
									<MudLink Href="@club.Item.Link" Target="_blank">
										<MudText Typo="Typo.subtitle2">
											@club.Item.Name
										</MudText>
									</MudLink>
								</CellTemplate>
							</TemplateColumn>
							<PropertyColumn Property="club => club.MarketValue" Title="Market value (€)" Sortable="false" />
							<PropertyColumn Property="club => club.PlayersCount" Title="Number of players" Sortable="false" />
							<PropertyColumn Property="club => club.AgeAverage" Title="Age average" Sortable="false" />
							<PropertyColumn Property="club => club.ForeignersCount" Title="Number of foreigners" Sortable="false" />
							<PropertyColumn Property="club => club.MarketValueAverage" Title="Average market value (€)" Sortable="false" />
						</Columns>
					</MudDataGrid>
				</MudCollapse>

			</MudListItem>
		}
	</MudList>
}


@code {
	private Dictionary<string, IEnumerable<ClubResponse>> clubs = null!;	
	private HashSet<ClubResponse> selectedClubs = new();
	private HashSet<CompetitionResponse> selectedCompetitions = new();
	private HashSet<CompetitionResponse> expandedCompetitions = new();
	private HashSet<CountryResponse> selectedCountries = new();
	private HashSet<CompetitionResponse> filteredCompetitions = new();
	private string _searchedCompetition = string.Empty;

	private string SearchedCompetition
	{
		get => _searchedCompetition;	
		set
		{
			if (_searchedCompetition != value)
			{
				_searchedCompetition = value;
				FilterCompetitions();
			}
		}
	}

	public async Task ForceOnInitializedAsync()
	{
		selectedClubs = new();
		selectedCompetitions = new();
		expandedCompetitions = new();
		selectedCountries = new();
		filteredCompetitions = new();
		_searchedCompetition = string.Empty;

		await OnInitializedAsync();
		StateHasChanged();
	}

	protected override async Task OnInitializedAsync()
	{
		PageReferenceService.CurrentPage = this;
		selectedCountries = ItemSelectionService.SelectedCountries;
		selectedCompetitions = ItemSelectionService.SelectedCompetitions;

		filteredCompetitions = selectedCompetitions;

		foreach (var competition in selectedCompetitions)
		{
			var clubs = await ClubClient.GetClubsAsync(competition.TransfermarktId);

			if (!clubs.Any())
			{
				var country = selectedCountries.First(country => country.Competitions.Contains(competition));

				await CompetititonClient.GetCompetitionsAsync(country.TransfermarktId, true);

				clubs = await ClubClient.GetClubsAsync(competition.TransfermarktId);
			}

			this.clubs = new Dictionary<string, IEnumerable<ClubResponse>>()
			{
				[competition.TransfermarktId] = clubs
			};
		}
	}

	private IEnumerable<ClubResponse> GetClubs(CompetitionResponse competition)
	{
		this.clubs.TryGetValue(competition.TransfermarktId, out var clubs);

		return clubs ?? Enumerable.Empty<ClubResponse>();
	}

	private void ToggleCompetitionExpansion(CompetitionResponse competition)
	{
		if (!expandedCompetitions.Add(competition))
		{
			expandedCompetitions.Remove(competition);
		}
	}

	private void SelectAllClubs()
	{
		if (selectedClubs.Count() == selectedCompetitions.SelectMany(competition => competition.ClubIds).Count())
		{
			selectedClubs = new();
		}
		else
		{
			selectedClubs = clubs.SelectMany(kvp => kvp.Value).ToHashSet();
		}
	}

	private void FilterCompetitions()
	{
		filteredCompetitions = selectedCompetitions?
			.Where(competition => competition.Name.Contains(_searchedCompetition, StringComparison.OrdinalIgnoreCase))
			.ToHashSet() ?? new HashSet<CompetitionResponse>();
	}

	private void NavigateToPlayers()
	{
		ItemSelectionService.SelectedClubs = selectedClubs;

		NavigationHistoryService.NavigateTo("/players");
	}
}
