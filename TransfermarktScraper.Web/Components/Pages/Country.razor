@page "/country"

@using Microsoft.Extensions.Options
@using TransfermarktScraper.Web.Clients.Interfaces
@using TransfermarktScraper.Web.Configuration
@using TransfermarktScraper.Web.Services;
@using TransfermarktScraper.Web.Services.Interfaces

@attribute [StreamRendering(true)]

@inject ICountryClient CountryClient
@inject IOptions<ClientSettings> ClientSettings
@inject IItemSelectionService ItemSelectionService
@inject IItemNavigationService ItemNavigationService
@inject NavigationManager Navigation

<PageTitle>Countries</PageTitle>

@if (countries == null)
{
    <MudText HtmlTag="em">Scraping countries please wait...</MudText>
}
else
{
    <MudTextField Label="Search countries..."
                  @bind-Value="SearchedCountry"
                  Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.Search"
                  Immediate="true"
                  @oninput="FilterCountries" />

    <MudGrid Spacing="4" Justify="Justify.FlexStart">
        @foreach (var country in filteredCountries)
        {
            <MudItem Class="mt-5">
                <MudLink OnClick="() => SelectCountry(country)">
                    <MudPaper Elevation="5">
                        <MudImage Src="@country.Flag" Alt="@country.Name" />
                        <MudText Typo="Typo.body2" Align="Align.Center">@country.Name</MudText>
                    </MudPaper>
                </MudLink>
            </MudItem>
        }
    </MudGrid>
}

@code {
    private IEnumerable<Domain.DTOs.Response.Country> countries = null!;
    private List<Domain.DTOs.Response.Country> filteredCountries = new();
    private string _searchedCountry = string.Empty;

    private string SearchedCountry
    {
        get => _searchedCountry;
        set
        {
            if (_searchedCountry != value)
            {
                _searchedCountry = value;
                FilterCountries();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        countries = await CountryClient.GetCountriesAsync();
        filteredCountries = countries.ToList();
    }

    private void FilterCountries()
    {
        filteredCountries = countries?
            .Where(country => country.Name.Contains(_searchedCountry, StringComparison.OrdinalIgnoreCase))
            .ToList() ?? new List<Domain.DTOs.Response.Country>();
    }

    private void SelectCountry(Domain.DTOs.Response.Country country)
    {
        ItemSelectionService.SelectedCountry = country;

        ItemNavigationService.NotifyNavigateToCompetitions();
    }
}
