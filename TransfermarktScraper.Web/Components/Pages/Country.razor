@page "/countries"

@using TransfermarktScraper.Domain.DTOs.Response.Scraper
@using TransfermarktScraper.Web.Clients.Interfaces
@using TransfermarktScraper.Web.Services.Interfaces

@attribute [StreamRendering(true)]

@implements IRefreshablePage

@inject IJSRuntime JSRuntime
@inject ICountryClient CountryClient
@inject IExporterClient ExporterClient
@inject ISettingsClient SettingsClient
@inject INavigationHistoryService NavigationHistoryService
@inject IItemSelectionService ItemSelectionService
@inject IPageReferenceService PageReferenceService

<PageTitle>Countries</PageTitle>

@if (countries == null)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mb-6" />
    <MudText HtmlTag="em" Class="mt-4">Scraping countries please wait...</MudText>
}
else
{
    <MudGrid>
        <MudItem xs="2">
            <MudTextField Label="Search countries..."
                          @bind-value="SearchedCountry"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          Immediate="true" />
        </MudItem>
        <MudSpacer />
        <MudItem xs="2" Class="d-flex justify-end">
            <MudSelect Label="Select exporting format"
                       Class="mr-2"
                       Variant="Variant.Filled"
                       T="string"
                       @bind-value="_selectedFormat">
                @{
                    if (formats != null)
                    {
                        foreach (var format in formats)
                        {
                            <MudSelectItem Value="@format">@format</MudSelectItem>
                        }
                    }
                }
            </MudSelect>
            <MudIconButton Disabled="string.IsNullOrEmpty(_selectedFormat)"
                           Icon="@Icons.Material.Filled.Download"
                           OnClick="ExportCountryCompetitionDataAsync" />
        </MudItem>
        <MudItem xs="2" Class="d-flex justify-end">
            <MudButton Color="Color.Primary"
                       FullWidth="true"
                       Size="Size.Large"
                       Variant="Variant.Filled"
                       OnClick="SelectAllCountries">
                Select All
            </MudButton>
        </MudItem>
        <MudItem xs="2" Class="d-flex justify-end">
            <MudButton Color="Color.Primary"
                       FullWidth="true"
                       Size="Size.Large"
                       Variant="Variant.Filled"
                       Disabled="!selectedCountries.Any()"
                       OnClick="NavigateToCompetitions">
                Scrape competitions
            </MudButton>
        </MudItem>
    </MudGrid>
    <MudGrid Spacing="3" Justify="Justify.FlexStart" Class="mt-6">
        @foreach (var country in filteredCountries)
        {
            <MudItem xs="2">
                <MudPaper>
                    <MudButton OnClick="() => ToggleCountrySelection(country)" FullWidth="true" Class="justify-start px-2">
                        <MudStack Row="true" AlignItems="AlignItems.Center">
                            <MudStack Row="true" AlignItems="AlignItems.Center">
                                <MudAvatar>
                                    <MudImage Src="@country.Flag" Alt="@country.Name" />
                                </MudAvatar>
                                <MudText Class="ml-2">@country.Name</MudText>
                            </MudStack>
                        </MudStack>
                    </MudButton>
                </MudPaper>
            </MudItem>
            @if (selectedCountries.Contains(country))
            {
                <MudBadge Class="mt-4" Overlap="true" Origin="Origin.TopRight" Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
            }
        }
    </MudGrid>
}

@code {
    private IEnumerable<CountryResponse> countries = null!;
    private HashSet<CountryResponse> filteredCountries = new();
    private HashSet<CountryResponse> selectedCountries = new();
    private string _searchedCountry = string.Empty;
    private string _selectedFormat = string.Empty;
    private IEnumerable<string> formats = null!;

    private string SearchedCountry
    {
        get => _searchedCountry;
        set
        {
            if (_searchedCountry != value)
            {
                _searchedCountry = value;
                FilterCountries();
            }
        }
    }

    public async Task ForceOnInitializedAsync()
    {
        filteredCountries = new();
        selectedCountries = new();
        ItemSelectionService.SelectedCountries = new();
        _searchedCountry = string.Empty;

        await OnInitializedAsync();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        PageReferenceService.CurrentPage = this;
        formats = await GetSupportedFormatsAsync();
        selectedCountries = ItemSelectionService.SelectedCountries;

        countries = await CountryClient.GetCountriesAsync();

        filteredCountries = countries.ToHashSet();
    }

    private void ToggleCountrySelection(CountryResponse country)
    {
        if (!selectedCountries.Add(country))
        {
            selectedCountries.Remove(country);
        }
    }

    private void FilterCountries()
    {
        filteredCountries = countries?
            .Where(country => country.Name.Contains(_searchedCountry, StringComparison.OrdinalIgnoreCase))
            .ToHashSet() ?? new();
    }

    private void SelectAllCountries()
    {
        if (selectedCountries.Count() == countries.Count())
        {
            selectedCountries = new();
        }
        else
        {
            selectedCountries = countries.ToHashSet();
        }
    }

    private void NavigateToCompetitions()
    {
        ItemSelectionService.SelectedCountries = selectedCountries;

        NavigationHistoryService.NavigateTo("/competitions");
    }

    private async Task<IEnumerable<string>> GetSupportedFormatsAsync()
    {
        var result = await SettingsClient.GetSupportedFormatsAsync();

        result = result.Select(format => format.ToUpperInvariant());

        return result;
    }

    private async Task ExportCountryCompetitionDataAsync()
    {
        var fileContentResult = await ExporterClient.ExportCountryCompetitionDataAsync(_selectedFormat, default);

        if (fileContentResult != null)
        {
            await JSRuntime.InvokeVoidAsync("downloadFile", fileContentResult.Base64, fileContentResult.Name, fileContentResult.Format);
        }
    }
}
