@page "/country"

@using Microsoft.Extensions.Options
@using TransfermarktScraper.Web.Clients.Interfaces
@using TransfermarktScraper.Web.Configuration
@using TransfermarktScraper.Web.Services;
@using TransfermarktScraper.Web.Services.Interfaces

@attribute [StreamRendering(true)]

@inject ICountryClient CountryClient
@inject IOptions<ClientSettings> ClientSettings
@inject INavigationHistoryService NavigationHistoryService

<PageTitle>Countries</PageTitle>

@if (countries == null)
{
    <MudText HtmlTag="em">Scraping countries please wait...</MudText>
}
else
{
    <MudGrid>
        <MudItem xs="2">
            <MudTextField Label="Search countries..."
                          @bind-value="SearchedCountry"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          Immediate="true" />
        </MudItem>
        <MudSpacer />
        <MudItem xs="2">
            <MudButton Color="Color.Primary"
                       Size="Size.Large"
                       Variant="Variant.Filled"
                       OnClick="NavigateToCompetitions">
                Scrape competitions
            </MudButton>
        </MudItem>
    </MudGrid>

    <MudGrid Spacing="4" Justify="Justify.FlexStart" Class="mt-6">
        @foreach (var country in filteredCountries)
        {
            <MudItem xs="2">
                <MudCard Class="@(selectedCountries.Contains(country) ? "mud-paper-outlined mud-elevation-5" : "mud-paper")">
                    <MudButton OnClick="() => ToggleSelection(country)" Class="pa-0">
                        <MudCardContent Class="d-flex align-items-center">
                            <MudImage Src="@country.Flag" Alt="@country.Name" Style="width: 20%;" />
                            <MudText Align="Align.Center" Class="flex-grow-1 mt-3" Style="width: 60%;">@($"{country.Name}")</MudText>
                            @if (selectedCountries.Contains(country))
                            {
                                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Primary"/>
                            }
                        </MudCardContent>
                    </MudButton>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

@code {
    private IEnumerable<Domain.DTOs.Response.Country> countries = null!;
    private List<Domain.DTOs.Response.Country> filteredCountries = new();
    private List<Domain.DTOs.Response.Country> selectedCountries = new();
    private string _searchedCountry = string.Empty;

    private string SearchedCountry
    {
        get => _searchedCountry;
        set
        {
            if (_searchedCountry != value)
            {
                _searchedCountry = value;
                FilterCountries();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        countries = await CountryClient.GetCountriesAsync();

        filteredCountries = countries.ToList();
    }

    private void FilterCountries()
    {
        filteredCountries = countries?
            .Where(country => country.Name.Contains(_searchedCountry, StringComparison.OrdinalIgnoreCase))
            .ToList() ?? new List<Domain.DTOs.Response.Country>();
    }

    private void ToggleSelection(Domain.DTOs.Response.Country country)
    {
        if (selectedCountries.Contains(country))
        {
            selectedCountries.Remove(country); // Unselect
        }
        else
        {
            selectedCountries.Add(country); // Select
        }
    }

    private void NavigateToCompetitions()
    {
        NavigationHistoryService.NavigateTo("/competitions");
    }
}
