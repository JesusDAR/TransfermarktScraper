@page "/start"

@using TransfermarktScraper.Web.Clients.Interfaces
@using TransfermarktScraper.Web.Services.Interfaces
@using System.Threading;

@inject IJSRuntime JSRuntime
@inject ICountryClient CountryClient
@inject IMasterClient MasterClient
@inject IExporterClient ExporterClient
@inject ISettingsClient SettingsClient
@inject INavigationHistoryService NavigationHistoryService

<PageTitle>Start</PageTitle>

@if (_isSpinnerActivated)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mb-6" />
}

<MudGrid Justify="Justify.Center" Spacing="2">
    <MudItem xs="12" Class="d-flex justify-center">
        <MudText>
            Options to configure the scraping process
        </MudText>
    </MudItem>
</MudGrid>
<MudGrid Justify="Justify.Center" Spacing="2" Class="mt-6">
    <MudItem md="2" Class="d-flex justify-center">
        <MudSelect Label="Visual scraping mode"
                   T="bool"
                   Value="_selectedHeadlessMode"
                   ValueChanged="OnSelectedHeadlessModeChanged">
            <MudSelectItem Value="true">Disabled</MudSelectItem>
            <MudSelectItem Value="false">Enabled</MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem md="2" Class="d-flex justify-center">
        <MudSelect Label="Always force scraping mode"
                   T="bool"
                   Value="_selectedForceScrapingMode"
                   ValueChanged="OnSelectedForceScrapingModeChanged">
            <MudSelectItem Value="true">Enabled</MudSelectItem>
            <MudSelectItem Value="false">Disabled</MudSelectItem>
        </MudSelect>
    </MudItem>
</MudGrid>

<MudDivider DividerType="DividerType.Middle" Class="mt-12 mb-12 my-6" />

<MudGrid Justify="Justify.Center" Spacing="2">
    <MudItem xs="12" Class="d-flex justify-center">
        <MudText>
            Massive exporting of all data in the selected format
        </MudText>
    </MudItem>
    <MudItem md="2" Class="mt-6">
        <MudStack Row="true">
            <MudSelect Label="Select exporting format"
                       T="string"
                       @bind-value="_selectedFormat">
                @{
                    if (formats != null)
                    {
                        foreach (var format in formats)
                        {
                            <MudSelectItem Value="@format">@format</MudSelectItem>
                        }
                    }
                }
            </MudSelect>
            <MudIconButton Disabled="string.IsNullOrEmpty(_selectedFormat)"
                           Class="pt-5"
                           Icon="@Icons.Material.Filled.Download"
                           OnClick="ExportCountryCompetitionDataAsync" />
        </MudStack>
    </MudItem>
</MudGrid>

<MudDivider DividerType="DividerType.Middle" Class="mt-12 mb-12 my-6" />

<MudGrid Justify="Justify.Center" Spacing="2">
    <MudItem md="2" Class="d-flex justify-center mt-2">
        <MudNumericField Label="Number of countries to scrape"
                         T="int"
                         FullWidth="true"
                         Value="_selectedCountriesCountToScrape"
                         ValueChanged="OnSelectedCountriesCountToScrapeChanged"
                         Variant="Variant.Text"
                         Min="0">
        </MudNumericField>
    </MudItem>
</MudGrid>

<MudGrid Justify="Justify.Center" Spacing="2" Class="mt-6">
    <MudItem xs="12" Class="d-flex justify-center">
        <MudText>
            Massive scraping (The process will take a long time to complete) of all data from the number of countries selected
        </MudText>
    </MudItem>
    <MudItem md="2" Class="d-flex justify-center mt-6">
        <MudButton Color="Color.Error"
                   Size="Size.Large"
                   FullWidth="true"
                   Variant="Variant.Filled"
                   OnClick="CleanDatabaseAsync">
            Clean Database
        </MudButton>
    </MudItem>
    <MudItem md="2" Class="d-flex justify-center mt-6">
        @if (!_isScrapingAllRunning)
        {
            <MudButton Color="Color.Tertiary"
                       Size="Size.Large"
                       Variant="Variant.Filled"
                       FullWidth="true"
                       OnClick="ScrapeAllAsync">
                Scrape all data
            </MudButton>
        }
        else
        {
            <MudButton Color="Color.Warning"
                       Size="Size.Large"
                       Variant="Variant.Filled"
                       FullWidth="true"
                       OnClick="CancelScrapeAll">
                Stop Scraping
            </MudButton>
        }
    </MudItem>

</MudGrid>

<MudGrid Justify="Justify.Center" Spacing="2" Class="mt-12">
    <MudItem xs="12" Class="d-flex justify-center">
        <MudText>
            Step by step scraping of the number of countries selected
        </MudText>
    </MudItem>
</MudGrid>
<MudGrid Justify="Justify.Center" Class="mt-3">
    <MudItem md="2" Class="d-flex justify-center">
        <MudButton Color="Color.Primary"
                   Size="Size.Large"
                   Variant="Variant.Filled"
                   FullWidth="true"
                   OnClick="NavigateToCountry">
            Scrape countries
        </MudButton>
    </MudItem>
</MudGrid>

@code {
    private bool _selectedHeadlessMode;
    private bool _selectedForceScrapingMode;
    private int _selectedCountriesCountToScrape;
    private string _selectedFormat = string.Empty;
    private IEnumerable<string> formats = null!;
    private bool _isScrapingAllRunning = false;
    private bool _isSpinnerActivated = false;
    private CancellationTokenSource? _cts;

    protected override async Task OnInitializedAsync()
    {
        _isSpinnerActivated = false;
        var settings = await SettingsClient.GetSettingsAsync();
        _selectedCountriesCountToScrape = settings.CountriesCountToScrape;
        _selectedForceScrapingMode = settings.IsForceScraping;
        _selectedHeadlessMode = settings.IsHeadlessMode;
        _isScrapingAllRunning = false;
        formats = await GetSupportedFormatsAsync();
    }

    private async Task OnSelectedHeadlessModeChanged(bool selectedHeadlessMode)
    {
        _selectedHeadlessMode = selectedHeadlessMode;
        await SettingsClient.SetHeadlessModeAsync(_selectedHeadlessMode);
    }

    private async Task OnSelectedForceScrapingModeChanged(bool selectedForceScrapingMode)
    {
        _selectedForceScrapingMode = selectedForceScrapingMode;
        await SettingsClient.SetForceScrapingAsync(_selectedForceScrapingMode);
    }

    private async Task OnSelectedCountriesCountToScrapeChanged(int selectedCountriesCountToScrape)
    {
        _selectedCountriesCountToScrape = selectedCountriesCountToScrape;
        await SettingsClient.SetCountriesCountToScrapeAsync(_selectedCountriesCountToScrape);
    }

    private void NavigateToCountry()
    {
        NavigationHistoryService.NavigateTo("/countries");
    }

    private async Task<IEnumerable<string>> GetSupportedFormatsAsync()
    {
        var result = await SettingsClient.GetSupportedFormatsAsync();

        result = result.Select(format => format.ToUpperInvariant());

        return result;
    }

    private async Task ExportCountryCompetitionDataAsync()
    {
        _isSpinnerActivated = true;

        var fileContentResult = await ExporterClient.ExportMasterDataAsync(_selectedFormat, default);

        if (fileContentResult != null)
        {
            await JSRuntime.InvokeVoidAsync("downloadFile", fileContentResult.Base64, fileContentResult.Name, fileContentResult.Format);
        }

        _isSpinnerActivated = false;
    }

    private async Task CleanDatabaseAsync()
    {
        _isSpinnerActivated = true;

        await MasterClient.CleanDatabaseAsync(default);

        _isSpinnerActivated = false;
    }

    private async Task ScrapeAllAsync()
    {
        _isSpinnerActivated = true;
        _cts = new CancellationTokenSource();
        _isScrapingAllRunning = true;

        await MasterClient.ScrapeAllAsync(_cts.Token);

        _isScrapingAllRunning = false;
        _isSpinnerActivated = false;
    }

    private void CancelScrapeAll()
    {
        _cts?.Cancel();
        _isScrapingAllRunning = false;
        _isSpinnerActivated = false;
    }
}