@using TransfermarktScraper.Web.Clients.Interfaces
@using TransfermarktScraper.ServiceDefaults.Logging.DTOs.Response

@inject ILogClient LogClient

<MudPaper Class="d-flex flex-column"
          Style="position: fixed; bottom: 0; left: 0; right: 0; max-height: 35%; min-height:35%; background-color: #1e1e1e; z-index: 1000;"
          Hidden="@Hidden"
          Elevation="10">

    <MudPaper Class="pa-2" Style="border: 1px solid #333;">
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center">
            <MudText Typo="Typo.subtitle2">Log Console</MudText>
            <MudTooltip Text="Clears the log console">
                <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.ClearAll" OnClick="ClearLogs" />
            </MudTooltip>
        </MudStack>
    </MudPaper>

    <MudPaper Class="flex-grow-1" Style="overflow-y: auto;">
        @foreach (var log in _logs)
        {
            var logColor = Color.Info;
            if (log.Level == ServiceDefaults.Logging.Enums.Level.Warning)
            {
                logColor = Color.Warning;
            }
            if (log.Level == ServiceDefaults.Logging.Enums.Level.Error)
            {
                logColor = Color.Error;
            }

            <MudText Color="@logColor" Style="white-space: pre-wrap; font-size: 100%; font-family: monospace;">@log.Message</MudText>
        }
    </MudPaper>
</MudPaper>



@code {
    [Parameter] public bool Hidden { get; set; }

    private Stack<LogResponse> _logs = new();

    protected override async Task OnInitializedAsync()
    {
        LogClient.OnLogReceived += HandleLogReceived;
        await LogClient.StartAsync();
    }

    private void HandleLogReceived(LogResponse log)
    {
        InvokeAsync(() =>
        {
            _logs.Push(log);
            try
            {
                StateHasChanged();
            }
            catch (ObjectDisposedException) { };
        });
    }

    public void ClearLogs()
    {
        _logs.Clear();
    }

    public async ValueTask DisposeAsync()
    {
        LogClient.OnLogReceived -= HandleLogReceived;
        await LogClient.DisposeAsync();
    }
}