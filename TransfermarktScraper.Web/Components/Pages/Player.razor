@page "/players"

@using TransfermarktScraper.Domain.DTOs.Request.Stat
@using TransfermarktScraper.Domain.DTOs.Response
@using TransfermarktScraper.Web.Clients.Interfaces
@using TransfermarktScraper.Web.Services.Interfaces

@attribute [StreamRendering(true)]

@inject IPlayerClient PlayerClient
@inject IPlayerStatClient PlayerStatClient
@inject INavigationHistoryService NavigationHistoryService
@inject IItemSelectionService ItemSelectionService

<PageTitle>Players</PageTitle>

@if (playersDict == null)
{
	<MudText HtmlTag="em">Scraping players please wait...</MudText>
}
else
{
	<MudGrid>
		<MudItem xs="2">
			<MudTextField Label="Search clubs..."
						  @bind-Value="SearchedClub"
						  Adornment="Adornment.Start"
						  AdornmentIcon="@Icons.Material.Filled.Search"
						  Immediate="true" />
		</MudItem>
		<MudSpacer />
		<MudItem xs="2" Class="d-flex justify-end">
			<MudButton Color="Color.Primary"
					   FullWidth="true"
					   Size="Size.Large"
					   Variant="Variant.Filled"
					   OnClick="SelectAllPlayers">
				Select All
			</MudButton>
		</MudItem>
		<MudItem xs="2" Class="d-flex justify-end">
			<MudButton Color="Color.Primary"
					   FullWidth="true"
					   Size="Size.Large"
					   Variant="Variant.Filled"
					   OnClick="NavigateToPlayerStats">
				Scrape stats
			</MudButton>
		</MudItem>
	</MudGrid>

	<MudList Dense="true" Gutters="true" T="ClubResponse" Class="mt-6">
		@foreach (var club in filteredClubs)
		{
			<MudListItem Ripple="false">
				<MudListSubheader @onclick="() => ToggleClubSelection(club)">
					<MudStack Row="true" AlignItems="AlignItems.Center">
						<MudAvatar Size="Size.Large">
							<MudImage Src="@club.Crest" Alt="@club.Name" />
						</MudAvatar>
						<MudSpacer />
						<MudText Typo="Typo.h6">@club.Name</MudText>
						<MudSpacer />
						<MudButton Variant="Variant.Outlined"
								   Color="Color.Primary"
								   OnClick="NavigateToPlayerStats"
								   Disabled="@(ItemSelectionService.SelectedPlayers.Count != 1)">
							Check stats
						</MudButton>
						<MudButton Variant="Variant.Outlined"
								   Color="Color.Primary"
								   OnClick="ScrapePlayerStatAsync"
								   Disabled="@(ItemSelectionService.SelectedPlayers.Count == 0)">
							Scrape stats
						</MudButton>
						<MudIcon Icon="@(selectedClubs.Contains(club)
							? Icons.Material.Filled.ArrowDropUp
							: Icons.Material.Filled.ArrowDropDown)"
								 Color="Color.Primary"
								 Size="Size.Large" />
					</MudStack>
				</MudListSubheader>

				<MudCollapse Expanded="@selectedClubs.Contains(club)">
					<MudGrid Spacing="3" Justify="Justify.FlexStart" Class="mt-6">
						@foreach (var player in GetPlayers(club))
						{
							<MudItem xs="1">
								<MudPaper>
									<MudButton OnClick="() => TogglePlayerSelection(player)" FullWidth="true">
										<MudStack AlignItems="AlignItems.Center">
											<MudImage Src="@player.Portrait"></MudImage>
											<MudText Align="Align.Center" Style="font-weight: bold;">@player.Name</MudText>
											<MudText Align="Align.Center" Style="font-style: italic;">@player.Position</MudText>
										</MudStack>
									</MudButton>
								</MudPaper>
							</MudItem>
							@if (ItemSelectionService.SelectedPlayers.Contains(player))
							{
								<MudBadge Class="mt-4" Overlap="true" Origin="Origin.TopRight" Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
							}
						}
					</MudGrid>
				</MudCollapse>

			</MudListItem>
		}
	</MudList>
}


@code {
	private Dictionary<string, IEnumerable<PlayerResponse>> playersDict = null!;
	private HashSet<ClubResponse> clubs = null!;
	private HashSet<ClubResponse> selectedClubs = new();
	private HashSet<ClubResponse> filteredClubs = new();
	private string _searchedClub = string.Empty;

	private string SearchedClub
	{
		get => _searchedClub;
		set
		{
			if (_searchedClub != value)
			{
				_searchedClub = value;
				FilterClubs();
			}
		}
	}

	protected override async Task OnInitializedAsync()
	{
		clubs = ItemSelectionService.SelectedClubs;

		filteredClubs = clubs;

		playersDict = new Dictionary<string, IEnumerable<PlayerResponse>>();

		foreach (var club in ItemSelectionService.SelectedClubs)
		{
			var playersList = await PlayerClient.GetPlayersAsync(club.TransfermarktId);

			playersDict[club.TransfermarktId] = playersList;
		}
	}

	private IEnumerable<PlayerResponse> GetPlayers(ClubResponse club)
	{
		playersDict.TryGetValue(club.TransfermarktId, out var playersList);

		return playersList ?? Enumerable.Empty<PlayerResponse>();
	}

	private void ToggleClubSelection(ClubResponse club)
	{
		if (!selectedClubs.Add(club))
		{
			selectedClubs.Remove(club);
		}
	}

	private void TogglePlayerSelection(PlayerResponse player)
	{
		if (!ItemSelectionService.SelectedPlayers.Add(player))
		{
			ItemSelectionService.SelectedPlayers.Remove(player);
		}
	}

	private void SelectAllPlayers()
	{
		if (ItemSelectionService.SelectedPlayers.Count() == ItemSelectionService.SelectedClubs.SelectMany(club => club.Players).Count())
		{
			ItemSelectionService.SelectedPlayers = new HashSet<PlayerResponse>();
		}
		else
		{
			ItemSelectionService.SelectedPlayers = playersDict.SelectMany(kvp => kvp.Value).ToHashSet();
		}
	}

	private void FilterClubs()
	{
		filteredClubs = clubs?
			.Where(club => club.Name.Contains(_searchedClub, StringComparison.OrdinalIgnoreCase))
			.ToHashSet() ?? new HashSet<ClubResponse>();
	}

	private void CheckPlayerStatAsync()
	{

	}

	private async void ScrapePlayerStatAsync()
	{
		var players = ItemSelectionService.SelectedPlayers;

		var playerStatRequests = new List<PlayerStatRequest>();

		foreach (var player in players)
		{
			var playerStatRequest = new PlayerStatRequest()
			{
				PlayerTransfermarktId = player.TransfermarktId,
				SeasonTransfermarktId = string.Empty,
				Position = player.Position,
				IncludeAllPlayerTransfermarktSeasons = true,
			};

			playerStatRequests.Add(playerStatRequest);
		}

		await PlayerStatClient.GetPlayerStatsAsync(playerStatRequests);
	}

	private void NavigateToPlayerStats()
	{
		var playerTransfermarktId = ItemSelectionService.SelectedPlayers.First().TransfermarktId;

		NavigationHistoryService.NavigateTo($"/players/{playerTransfermarktId}/stats");
	}
}
