@page "/players"

@using TransfermarktScraper.Domain.DTOs.Request.Scraper.Stat
@using TransfermarktScraper.Domain.DTOs.Response
@using TransfermarktScraper.Domain.DTOs.Response.Scraper
@using TransfermarktScraper.Web.Clients.Interfaces
@using TransfermarktScraper.Web.Services.Interfaces

@attribute [StreamRendering(true)]

@implements IRefreshablePage

@inject IJSRuntime JSRuntime
@inject IExporterClient ExporterClient
@inject IPlayerClient PlayerClient
@inject ISettingsClient SettingsClient
@inject IPlayerStatClient PlayerStatClient
@inject INavigationHistoryService NavigationHistoryService
@inject IItemSelectionService ItemSelectionService
@inject IPageReferenceService PageReferenceService

<PageTitle>Players</PageTitle>

@if (players == null || !players.Any())
{
	<MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mb-6" />
	<MudText HtmlTag="em" Class="mt-4">Scraping players please wait...</MudText>
}
else
{
	<MudGrid>
		<MudItem xs="2">
			<MudTextField Label="Search clubs..."
						  @bind-Value="SearchedClub"
						  Adornment="Adornment.Start"
						  AdornmentIcon="@Icons.Material.Filled.Search"
						  Immediate="true" />
		</MudItem>
		<MudSpacer />
		<MudItem xs="2" Class="d-flex justify-end">
			<MudSelect Label="Select exporting format"
					   Class="mr-2"
					   Variant="Variant.Filled"
					   T="string"
					   @bind-value="_selectedFormat">
				@{
					if (formats != null)
					{
						foreach (var format in formats)
						{
							<MudSelectItem Value="@format">@format</MudSelectItem>
						}
					}
				}
			</MudSelect>
			<MudIconButton Disabled="string.IsNullOrEmpty(_selectedFormat)"
						   Icon="@Icons.Material.Filled.Download"
						   OnClick="ExportClubPlayerDataAsync" />
		</MudItem>
		<MudItem xs="2" Class="d-flex justify-end">
			<MudButton Color="Color.Primary"
					   FullWidth="true"
					   Size="Size.Large"
					   Variant="Variant.Filled"
					   OnClick="SelectAllPlayers">
				Select All
			</MudButton>
		</MudItem>
		<MudItem xs="2" Class="d-flex justify-end">
			<MudButton Color="Color.Primary"
					   FullWidth="true"
					   Size="Size.Large"
					   Variant="Variant.Filled"
					   Disabled="!selectedPlayers.Any()"
					   OnClick="NavigateToPlayerStats">
				Scrape stats
			</MudButton>
		</MudItem>
	</MudGrid>

	<MudList Dense="true" Gutters="true" T="ClubResponse" Class="mt-6">
		@foreach (var club in filteredClubs)
		{
			<MudListItem Ripple="false">
				<MudListSubheader @onclick="() => ToggleClubExpansion(club)">
					<MudStack Row="true" AlignItems="AlignItems.Center">
						<MudAvatar Size="Size.Large" Class="mt-2">
							<MudImage Src="@club.Crest" Alt="@club.Name" />
						</MudAvatar>
						<MudText Typo="Typo.h6" Class="ml-5">@club.Name</MudText>
						<MudSpacer />
						<MudButton Variant="Variant.Outlined"
								   Color="Color.Primary"
								   OnClick="NavigateToPlayerStats"
								   Disabled="@(selectedPlayers.Count != 1)">
							Check stats
						</MudButton>
						<MudButton Variant="Variant.Outlined"
								   Color="Color.Primary"
								   OnClick="ScrapePlayerStatAsync"
								   Disabled="@(selectedPlayers.Count == 0)">
							Scrape stats
						</MudButton>
						<MudIcon Icon="@(expandedClubs.Contains(club) ? Icons.Material.Filled.ArrowDropUp : Icons.Material.Filled.ArrowDropDown)"
								 Color="Color.Primary"
								 Size="Size.Large" />
					</MudStack>
				</MudListSubheader>

				<MudCollapse Expanded="@expandedClubs.Contains(club)">
					<MudGrid Spacing="3" Justify="Justify.FlexStart" Class="mt-6">
						@foreach (var player in GetPlayers(club))
						{
							<MudItem xs="1">
								<MudPaper>
									<MudButton OnClick="() => TogglePlayerSelection(player)" FullWidth="true">
										<MudStack AlignItems="AlignItems.Center">
											<MudImage Src="@player.Portrait"></MudImage>
											<MudText Align="Align.Center" Style="font-weight: bold;">@player.Name</MudText>
											<MudText Align="Align.Center" Style="font-style: italic;">@player.Position</MudText>
										</MudStack>
									</MudButton>
								</MudPaper>
							</MudItem>
							@if (selectedPlayers.Contains(player))
							{
								<MudBadge Class="mt-4" Overlap="true" Origin="Origin.TopRight" Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
							}
						}
					</MudGrid>
				</MudCollapse>

			</MudListItem>
		}
	</MudList>
}


@code {
	private Dictionary<string, IEnumerable<PlayerResponse>> players = null!;
	private HashSet<ClubResponse> selectedClubs = new();
	private HashSet<ClubResponse> expandedClubs = new();
	private HashSet<PlayerResponse> selectedPlayers = new();
	private HashSet<ClubResponse> filteredClubs = new();
	private string _searchedClub = string.Empty;
	private string _selectedFormat = string.Empty;
	private IEnumerable<string> formats = null!;

	private string SearchedClub
	{
		get => _searchedClub;
		set
		{
			if (_searchedClub != value)
			{
				_searchedClub = value;
				FilterClubs();
			}
		}
	}

	public async Task ForceOnInitializedAsync()
	{
		selectedClubs = new();
		expandedClubs = new();
		selectedPlayers = new();
		filteredClubs = new();
		_searchedClub = string.Empty;

		await OnInitializedAsync();
		StateHasChanged();
	}

	protected override async Task OnInitializedAsync()
	{
		PageReferenceService.CurrentPage = this;
		formats = await GetSupportedFormatsAsync();
		selectedClubs = ItemSelectionService.SelectedClubs;
		selectedPlayers = ItemSelectionService.SelectedPlayer != null ? new() { ItemSelectionService.SelectedPlayer } : new();

		filteredClubs = selectedClubs;

		if (this.players == null)
		{
			this.players = new();
		}

		foreach (var club in selectedClubs)
		{
			var players = await PlayerClient.GetPlayersAsync(club.TransfermarktId);

			this.players[club.TransfermarktId] = players;
		}
	}

	private IEnumerable<PlayerResponse> GetPlayers(ClubResponse club)
	{
		this.players.TryGetValue(club.TransfermarktId, out var players);

		return players ?? Enumerable.Empty<PlayerResponse>();
	}

	private void ToggleClubExpansion(ClubResponse club)
	{
		if (!expandedClubs.Add(club))
		{
			expandedClubs.Remove(club);
		}
	}

	private void TogglePlayerSelection(PlayerResponse player)
	{
		if (!selectedPlayers.Add(player))
		{
			selectedPlayers.Remove(player);
		}
	}

	private void SelectAllPlayers()
	{
		if (selectedPlayers.Count() == selectedClubs.SelectMany(club => club.Players).Count())
		{
			selectedPlayers = new();
		}
		else
		{
			selectedPlayers = players.SelectMany(kvp => kvp.Value).ToHashSet();
		}
	}

	private void FilterClubs()
	{
		filteredClubs = selectedClubs?
			.Where(club => club.Name.Contains(_searchedClub, StringComparison.OrdinalIgnoreCase))
			.ToHashSet() ?? new HashSet<ClubResponse>();
	}

	private async Task ScrapePlayerStatAsync()
	{
		var playerStatRequests = new List<PlayerStatRequest>();

		foreach (var player in selectedPlayers)
		{
			var playerStatRequest = new PlayerStatRequest()
			{
				PlayerTransfermarktId = player.TransfermarktId,
				SeasonTransfermarktId = string.Empty,
				Position = player.Position,
				IncludeAllPlayerTransfermarktSeasons = true,
			};

			playerStatRequests.Add(playerStatRequest);
		}

		await PlayerStatClient.GetPlayerStatsAsync(playerStatRequests, default);
	}

	private void NavigateToPlayerStats()
	{
		if (selectedPlayers.Count == 1)
		{
			ItemSelectionService.SelectedPlayer = selectedPlayers.First();

			NavigationHistoryService.NavigateTo($"/players/{ItemSelectionService.SelectedPlayer.TransfermarktId}/stats");
		}
	}

	private async Task<IEnumerable<string>> GetSupportedFormatsAsync()
	{
		var result = await SettingsClient.GetSupportedFormatsAsync();

		result = result.Select(format => format.ToUpperInvariant());

		return result;
	}

	private async Task ExportClubPlayerDataAsync()
	{
		var fileContentResult = await ExporterClient.ExportClubPlayerDataAsync(_selectedFormat, default);

		if (fileContentResult != null)
		{
			await JSRuntime.InvokeVoidAsync("downloadFile", fileContentResult.Base64, fileContentResult.Name, fileContentResult.Format);
		}
	}
}
