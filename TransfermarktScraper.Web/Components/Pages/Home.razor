@page "/"

@using TransfermarktScraper.Web.Clients.Interfaces
@using TransfermarktScraper.Web.Services.Interfaces

@inject ISettingsClient SettingsClient
@inject INavigationHistoryService NavigationHistoryService

<PageTitle>Home</PageTitle>

<MudGrid>
    <MudItem xs="12" Class="d-flex justify-center">
        <MudText>
            Here comes some general explanation about what the app does
        </MudText>
    </MudItem>
</MudGrid>

<MudGrid Justify="Justify.Center" Spacing="2" Class="mt-6">
    <MudItem md="2">
        <MudSelect Label="Visual scraping mode"
                   T="bool"
                   Value="_selectedHeadlessMode"
                   ValueChanged="OnSelectedHeadlessModeChanged">
            <MudSelectItem Value="true">Disabled</MudSelectItem>
            <MudSelectItem Value="false">Enabled</MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem md="2">
        <MudSelect Label="Always force scraping mode"
                   T="bool"
                   Value="_selectedForceScrapingMode"
                   ValueChanged="OnSelectedForceScrapingModeChanged">
            <MudSelectItem Value="true">Enabled</MudSelectItem>
            <MudSelectItem Value="false">Disabled</MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem md="2">
        <MudNumericField Label="Number of countries to scrape"
                         T="int"
                         Value="_selectedCountriesCountToScrape"
                         ValueChanged="OnSelectedCountriesCountToScrapeChanged"
                         Variant="Variant.Text"
                         Min="0">
        </MudNumericField>
    </MudItem>
</MudGrid>
<MudGrid Justify="Justify.Center" Class="mt-6">
    <MudItem md="6" Class="d-flex justify-center">
        <MudButton Color="Color.Primary"
                   Size="Size.Large"
                   Variant="Variant.Filled"
                   OnClick="NavigateToCountry">
            Scrape countries
        </MudButton>
    </MudItem>
</MudGrid>



@code {
    private bool _selectedHeadlessMode;
    private bool _selectedForceScrapingMode;
    private int _selectedCountriesCountToScrape;

    protected override async Task OnInitializedAsync()
    {
        var settings = await SettingsClient.GetSettingsAsync();
        _selectedCountriesCountToScrape = settings.CountriesCountToScrape;
        _selectedForceScrapingMode = settings.IsForceScraping;
        _selectedHeadlessMode = settings.IsForceScraping;
    }

    private async Task OnSelectedHeadlessModeChanged(bool selectedHeadlessMode)
    {
        _selectedHeadlessMode = selectedHeadlessMode;
        await SettingsClient.SetHeadlessModeAsync(_selectedHeadlessMode);
    }

    private async Task OnSelectedForceScrapingModeChanged(bool selectedForceScrapingMode)
    {
        _selectedForceScrapingMode = selectedForceScrapingMode;
        await SettingsClient.SetForceScrapingAsync(_selectedForceScrapingMode);
    }

    private async Task OnSelectedCountriesCountToScrapeChanged(int selectedCountriesCountToScrape)
    {
        _selectedCountriesCountToScrape = selectedCountriesCountToScrape;
        await SettingsClient.SetCountriesCountToScrapeAsync(_selectedCountriesCountToScrape);
    }

    private void NavigateToCountry()
    {
        NavigationHistoryService.NavigateTo("/countries");
    }
}