@page "/competition"

@using Microsoft.AspNetCore.WebUtilities
@using TransfermarktScraper.Web.Clients.Interfaces
@using TransfermarktScraper.Web.Services.Interfaces
@using AutoMapper

@attribute [StreamRendering(true)]

@inject ICountryClient CountryClient
@inject INavigationHistoryService NavigationHistoryService
@inject IItemSelectionService ItemSelectionService
@inject IMapper Mapper

<PageTitle>Competitions</PageTitle>

@if (countries == null)
{
	<MudText HtmlTag="em">Scraping competitions please wait...</MudText>
}
else
{
	<MudGrid>
		<MudItem xs="2">
			<MudTextField Label="Search countries..."
						  @bind-Value="SearchedCountry"
						  Adornment="Adornment.Start"
						  AdornmentIcon="@Icons.Material.Filled.Search"
						  Immediate="true" />
		</MudItem>
		<MudSpacer />
		<MudItem xs="2" Class="d-flex justify-end">
			<MudButton Color="Color.Primary"
					   FullWidth="true"
					   Size="Size.Large"
					   Variant="Variant.Filled"
					   OnClick="SelectAllCompetitions">
				Select All
			</MudButton>
		</MudItem>
		<MudItem xs="2" Class="d-flex justify-end">
			<MudButton Color="Color.Primary"
					   FullWidth="true"
					   Size="Size.Large"
					   Variant="Variant.Filled"
					   OnClick="NavigateToClubs">
				Scrape clubs
			</MudButton>
		</MudItem>
	</MudGrid>


	<MudList Dense="true" Gutters="true" T="Domain.DTOs.Response.Country" Class="mt-6">
		@foreach (var country in filteredCountries)
		{
			<MudListItem Ripple="false" Class="cursor-pointer">
				<MudListSubheader @onclick="() => ToggleCountrySelection(country)">
					<MudStack Row="true" AlignItems="AlignItems.Center">
						<MudAvatar>
							<MudImage Src="@country.Flag" Alt="@country.Name" />
						</MudAvatar>
						<MudSpacer />
						<MudText Typo="Typo.h6">@country.Name</MudText>
						<MudSpacer />
						<MudIcon Icon="@(selectedCountries.Contains(country)
							? Icons.Material.Filled.ArrowDropUp
							: Icons.Material.Filled.ArrowDropDown)"
								 Color="Color.Primary"
								 Size="Size.Large" />
					</MudStack>
				</MudListSubheader>
				<MudCollapse Expanded="@selectedCountries.Contains(country)">

					<MudDataGrid T="Domain.DTOs.Response.Competition"
								 Dense="true"
								 Hover="true"
								 Filterable="false"
								 MultiSelection="true"
								 ColumnResizeMode="ResizeMode.Container"
								 SelectedItems="@ItemSelectionService.SelectedCompetitions"
								 SelectedItemsChanged="OnCompetitionCheckboxSelectionChanged"
								 @key="country.TransfermarktId"
								 RowClick="(e) => ToggleCompetitionSelection(e.Item)"
								 Items="@country.Competitions">
						<Columns>
							<SelectColumn T="Domain.DTOs.Response.Competition" />
							<TemplateColumn T="Domain.DTOs.Response.Competition" Title="Logo">
								<CellTemplate>
									<MudAvatar>
										<MudImage Src="@context.Item.Logo" Alt="@context.Item.Name" />
									</MudAvatar>
								</CellTemplate>
							</TemplateColumn>
							<PropertyColumn Property="x => x.Name" Sortable="false" />
							<PropertyColumn Property="x => x.Cup" Sortable="false" />
							<PropertyColumn Property="x => x.Tier" Title="League tier" Sortable="false" />
							<PropertyColumn Property="x => x.MarketValue" Title="Market value" Sortable="false" />
							<PropertyColumn Property="x => x.Coefficient" Title="UEFA coefficient" Sortable="false" />
							<PropertyColumn Property="x => x.ClubsCount" Title="Number of clubs" Sortable="false" />
							<PropertyColumn Property="x => x.Participants" Title="Cup participants" Sortable="false" />
							<PropertyColumn Property="x => x.CurrentChampion" Title="Current champion" Sortable="false" />
							<PropertyColumn Property="x => x.MostTimesChampion" Title="Most times champion" Sortable="false" />
							<PropertyColumn Property="x => x.PlayersCount" Title="Number of players" Sortable="false" />
							<PropertyColumn Property="x => x.AgeAverage" Title="Age average" Sortable="false" />
							<PropertyColumn Property="x => x.ForeignersCount" Title="Number of foreigners" Sortable="false" />
							<PropertyColumn Property="x => x.MarketValueAverage" Title="Average market value" Sortable="false" />
						</Columns>
					</MudDataGrid>
				</MudCollapse>
			</MudListItem>
		}
	</MudList>
}

@code {
	private IEnumerable<Domain.DTOs.Response.Country> countries = null!;
	private HashSet<Domain.DTOs.Response.Country> selectedCountries = new();
	private List<Domain.DTOs.Response.Country> filteredCountries = new();
	private string _searchedCountry = string.Empty;

	private string SearchedCountry
	{
		get => _searchedCountry;
		set
		{
			if (_searchedCountry != value)
			{
				_searchedCountry = value;
				FilterCountries();
			}
		}
	}

	protected override async Task OnInitializedAsync()
	{
		var countryDtos = Mapper.Map<IEnumerable<Domain.DTOs.Request.Country>>(ItemSelectionService.SelectedCountries);

		countries = await CountryClient.GetCountriesAsync(countryDtos);

		filteredCountries = countries.ToList();
	}

	private void ToggleCountrySelection(Domain.DTOs.Response.Country country)
	{
		if (!selectedCountries.Add(country))
		{
			selectedCountries.Remove(country);
		}
	}

	private void OnCompetitionCheckboxSelectionChanged(HashSet<Domain.DTOs.Response.Competition> selected)
	{
		ItemSelectionService.SelectedCompetitions = selected;
	}

	private void ToggleCompetitionSelection(Domain.DTOs.Response.Competition competition)
	{
		if (!ItemSelectionService.SelectedCompetitions.Add(competition))
		{
			ItemSelectionService.SelectedCompetitions.Remove(competition);
		}
	}

	private void SelectAllCompetitions()
	{
		if (ItemSelectionService.SelectedCompetitions.Count() == ItemSelectionService.SelectedCountries.SelectMany(country => country.Competitions).Count())
		{
			ItemSelectionService.SelectedCompetitions = new HashSet<Domain.DTOs.Response.Competition>();
		}
		else
		{
			ItemSelectionService.SelectedCompetitions = ItemSelectionService.SelectedCountries.SelectMany(country => country.Competitions).ToHashSet();
		}
	}

	private void FilterCountries()
	{
		filteredCountries = countries?
			.Where(country => country.Name.Contains(_searchedCountry, StringComparison.OrdinalIgnoreCase))
			.ToList() ?? new List<Domain.DTOs.Response.Country>();
	}

	private void NavigateToClubs()
	{
		NavigationHistoryService.NavigateTo("/clubs");
	}
}