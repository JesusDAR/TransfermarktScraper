@page "/competitions"

@using TransfermarktScraper.Domain.DTOs.Request
@using TransfermarktScraper.Domain.DTOs.Response
@using TransfermarktScraper.Web.Clients.Interfaces
@using TransfermarktScraper.Web.Services.Interfaces
@using Mapster

@attribute [StreamRendering(true)]

@implements IRefreshablePage

@inject ICountryClient CountryClient
@inject INavigationHistoryService NavigationHistoryService
@inject IItemSelectionService ItemSelectionService
@inject IPageReferenceService PageReferenceService

<PageTitle>Competitions</PageTitle>

@if (selectedCountries == null)
{
	<MudText HtmlTag="em">Scraping competitions please wait...</MudText>
}
else
{
	<MudGrid>
		<MudItem xs="2">
			<MudTextField Label="Search countries..."
						  @bind-Value="SearchedCountry"
						  Adornment="Adornment.Start"
						  AdornmentIcon="@Icons.Material.Filled.Search"
						  Immediate="true" />
		</MudItem>
		<MudSpacer />
		<MudItem xs="2" Class="d-flex justify-end">
			<MudButton Color="Color.Primary"
					   FullWidth="true"
					   Size="Size.Large"
					   Variant="Variant.Filled"
					   OnClick="SelectAllCompetitions">
				Select All
			</MudButton>
		</MudItem>
		<MudItem xs="2" Class="d-flex justify-end">
			<MudButton Color="Color.Primary"
					   FullWidth="true"
					   Size="Size.Large"
					   Variant="Variant.Filled"
					   Disabled="!selectedCompetitions.Any()"
					   OnClick="NavigateToClubs">
				Scrape clubs
			</MudButton>
		</MudItem>
	</MudGrid>


	<MudList Dense="true" Gutters="true" T="CountryResponse" Class="mt-6">
		@foreach (var country in filteredCountries)
		{
			<MudListItem Ripple="false">
				<MudListSubheader @onclick="() => ToggleCountryExpansion(country)">
					<MudStack Row="true" AlignItems="AlignItems.Center">
						<MudAvatar Size="Size.Large" Class="mt-2">
							<MudImage Src="@country.Flag" Alt="@country.Name" />
						</MudAvatar>
						<MudSpacer />
						<MudText Typo="Typo.h6">@country.Name</MudText>
						<MudSpacer />
						<MudIcon Icon="@(expandedCountries.Contains(country) ? Icons.Material.Filled.ArrowDropUp : Icons.Material.Filled.ArrowDropDown)"
								 Color="Color.Primary"
								 Size="Size.Large" />
					</MudStack>
				</MudListSubheader>
				<MudCollapse Expanded="@expandedCountries.Contains(country)">
					<MudDataGrid T="CompetitionResponse"
								 Dense="true"
								 Hover="true"
								 Filterable="false"
								 MultiSelection="true"
								 ColumnResizeMode="ResizeMode.Container"
								 @bind-SelectedItems="@selectedCompetitions"
								 SelectOnRowClick="true"
								 @key="country.TransfermarktId"
								 Items="@country.Competitions">
						<Columns>
							<SelectColumn T="CompetitionResponse" />
							<TemplateColumn T="CompetitionResponse" Context="competition" Title="Logo">
								<CellTemplate>
									<MudAvatar>
										<MudImage Src="@competition.Item.Logo" Alt="@competition.Item.Name" />
									</MudAvatar>
								</CellTemplate>
							</TemplateColumn>
							<TemplateColumn T="CompetitionResponse" Context="competition" Title="Name">
								<CellTemplate>
									<MudLink Href="@competition.Item.Link" Target="_blank">
										<MudText Typo="Typo.subtitle2">
											@competition.Item.Name
										</MudText>
									</MudLink>
								</CellTemplate>
							</TemplateColumn>
							<PropertyColumn Property="competition => competition.Cup" Sortable="false" />
							<PropertyColumn Property="competition => competition.Tier" Title="League tier" Sortable="false" />
							<PropertyColumn Property="competition => competition.MarketValue" Title="Market value (€)" Sortable="false" />
							<PropertyColumn Property="competition => competition.ClubsCount" Title="Number of clubs" Sortable="false" />
							<PropertyColumn Property="competition => competition.Participants" Title="Cup participants" Sortable="false" />
							<PropertyColumn Property="competition => competition.CurrentChampion" Title="Current champion" Sortable="false" />
							<PropertyColumn Property="competition => competition.MostTimesChampion" Title="Most times champion" Sortable="false" />
							<PropertyColumn Property="competition => competition.PlayersCount" Title="Number of players" Sortable="false" />
							<PropertyColumn Property="competition => competition.AgeAverage" Title="Age average" Sortable="false" />
							<PropertyColumn Property="competition => competition.ForeignersCount" Title="Number of foreigners" Sortable="false" />
							<PropertyColumn Property="competition => competition.MarketValueAverage" Title="Average market value (€)" Sortable="false" />
						</Columns>
					</MudDataGrid>
				</MudCollapse>
			</MudListItem>
		}
	</MudList>
}

@code {
	private HashSet<CountryResponse> selectedCountries = null!;
	private HashSet<CountryResponse> expandedCountries = new();
	private HashSet<CountryResponse> filteredCountries = new();
	private HashSet<CompetitionResponse> selectedCompetitions = new();
	private string _searchedCountry = string.Empty;

	private string SearchedCountry
	{
		get => _searchedCountry;
		set
		{
			if (_searchedCountry != value)
			{
				_searchedCountry = value;
				FilterCountries();
			}
		}
	}

	public async Task ForceOnInitializedAsync()
	{
		selectedCountries = null!;
		expandedCountries = new();
		filteredCountries = new();
		selectedCompetitions = new();
		_searchedCountry = string.Empty;

		await OnInitializedAsync();
		StateHasChanged();
	}

	protected override async Task OnInitializedAsync()
	{
		PageReferenceService.CurrentPage = this;

		var countryDtos = ItemSelectionService.SelectedCountries.Adapt<IEnumerable<CountryRequest>>();

		var updatedCountries = await CountryClient.GetCountriesAsync(countryDtos);

		selectedCountries = updatedCountries.ToHashSet();
		filteredCountries = selectedCountries;
	}

	private void ToggleCountryExpansion(CountryResponse country)
	{
		if (!expandedCountries.Add(country))
		{
			expandedCountries.Remove(country);
		}
	}

	private void SelectAllCompetitions()
	{
		if (selectedCompetitions.Count() == selectedCountries.SelectMany(country => country.Competitions).Count())
		{
			selectedCompetitions = new();
		}
		else
		{
			selectedCompetitions = selectedCountries.SelectMany(country => country.Competitions).ToHashSet();
		}
	}

	private void FilterCountries()
	{
		filteredCountries = selectedCountries?
			.Where(country => country.Name.Contains(_searchedCountry, StringComparison.OrdinalIgnoreCase))
			.ToHashSet() ?? new();
	}

	private void NavigateToClubs()
	{
		ItemSelectionService.SelectedCompetitions = selectedCompetitions;

		NavigationHistoryService.NavigateTo("/clubs");
	}
}