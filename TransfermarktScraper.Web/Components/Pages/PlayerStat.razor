@page "/players/{playerTransfermarktId}/stats"

@using TransfermarktScraper.Domain.DTOs.Response
@using TransfermarktScraper.Domain.DTOs.Response.Stat
@using TransfermarktScraper.Domain.DTOs.Request.Stat
@using TransfermarktScraper.Web.Clients.Interfaces
@using TransfermarktScraper.Web.Services.Interfaces

@attribute [StreamRendering(true)]

@implements IRefreshablePage

@inject IPlayerStatClient PlayerStatClient
@inject IItemSelectionService ItemSelectionService
@inject IPageReferenceService PageReferenceService

<PageTitle>Player Stats</PageTitle>

@if (selectedPlayer == null || selectedPlayerStat == null)
{
    <MudText HtmlTag="em">Scraping player stats please wait...</MudText>
}
else
{
    <MudStack Row="true">
        <MudGrid Justify="Justify.FlexStart">
            <MudItem xs="2">
                <MudContainer>
                    <MudBadge Content="@selectedPlayer.Number" Origin="Origin.BottomRight" Color="Color.Tertiary" Overlap="true">
                        <MudImage Src="@selectedPlayer.Portrait" Alt="@selectedPlayer.Name" Width="200">
                        </MudImage>
                    </MudBadge>

                </MudContainer>
            </MudItem>
            <MudItem xs="2" Class="mt-5">
                <MudList Dense="true" T="PlayerResponse">

                    <MudListItem><MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" Class="mr-2" />Name: @selectedPlayer.Name</MudListItem>
                    <MudListItem><MudIcon Icon="@Icons.Material.Filled.CalendarMonth" Size="Size.Small" Class="mr-2" />Age: @selectedPlayer.Age</MudListItem>
                    <MudListItem><MudIcon Icon="@Icons.Material.Filled.CalendarToday" Size="Size.Small" Class="mr-2" />Date of birth: @selectedPlayer.DateOfBirth</MudListItem>
                    <MudListItem>
                        <MudStack Row="true">
                            <MudIcon Icon="@Icons.Material.Filled.SouthAmerica" Size="Size.Small" />
                            Nationalities:
                            <MudAvatarGroup Spacing="0">
                                @foreach (var nationality in selectedPlayer.Nationalities)
                                {
                                    <MudAvatar Class="mr-2" Size="Size.Small" Square="true">
                                        <MudImage Src=@nationality></MudImage>
                                    </MudAvatar>
                                }
                            </MudAvatarGroup>
                        </MudStack>
                    </MudListItem>
                    <MudListItem><MudIcon Icon="@Icons.Material.Filled.Height" Size="Size.Small" Class="mr-2" />Height: @(selectedPlayer.Height.HasValue && selectedPlayer.Height.Value != 0 ? $"{selectedPlayer.Height} cm" : "-")</MudListItem>
                    <MudListItem><MudIcon Icon="@Icons.Material.Filled.SportsSoccer" Size="Size.Small" Class="mr-2" />Preferred Foot: @(selectedPlayer.Foot != string.Empty ? selectedPlayer.Foot : "-")</MudListItem>
                </MudList>
            </MudItem>
            <MudItem xs="2" Class="mt-5">
                <MudList Dense="true" T="PlayerResponse">
                    <MudListItem><MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" Class="mr-2" />Position: @(selectedPlayer.Position != string.Empty ? selectedPlayer.Position : "-")</MudListItem>
                    <MudListItem><MudIcon Icon="@Icons.Material.Filled.FlightLand" Size="Size.Small" Class="mr-2" />Start Contract: @selectedPlayer.ContractStart</MudListItem>
                    <MudListItem><MudIcon Icon="@Icons.Material.Filled.FlightTakeoff" Size="Size.Small" Class="mr-2" />End Contract: @(selectedPlayer.ContractEnd ?? "-")</MudListItem>
                    <MudListItem><MudIcon Icon="@Icons.Material.Filled.EuroSymbol" Size="Size.Small" Class="mr-2" />Market value: @selectedPlayer.MarketValue â‚¬</MudListItem>
                    <MudListItem>
                        <MudSelect Label="Select Season"
                                   T="PlayerSeasonStatResponse"
                                   Value="selectedPlayerSeasonStat"
                                   ValueChanged="OnSelectedPlayerSeasonStatAsync">
                            @foreach (var playerSeasonStat in selectedPlayerStat.PlayerSeasonStats)
                            {
                                <MudSelectItem T="PlayerSeasonStatResponse" Value="playerSeasonStat">
                                    @(playerSeasonStat.SeasonTransfermarktId == "ges" ? "Overall Career" : playerSeasonStat.SeasonTransfermarktId)
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudListItem>
                </MudList>
            </MudItem>
            <MudItem xs="6">
                @if (selectedPlayer.MarketValues != null && selectedPlayer.MarketValues.Any())
                {
                    <MudChart ChartType="ChartType.Line"
                              XAxisLabels="@XAxisLabels"
                              ChartSeries="@Series"
                              ChartOptions="@Options"
                              AxisChartOptions="@AxisOptions"
                              LegendPosition="Position.Bottom"
                              Width="100%"
                              Height="450px" />
                }
            </MudItem>
        </MudGrid>
    </MudStack>
    @if (selectedPlayerSeasonStat != null && selectedPlayerSeasonStat.IsScraped)
    {
        <MudList Dense="true" Gutters="true" T="PlayerSeasonStatResponse" Class="mt-6">
            <MudListItem Ripple="false">
                <MudListSubheader @onclick="() => IsPlayerSeasonOverallStatSelected = !IsPlayerSeasonOverallStatSelected">
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h6">
                            @(selectedPlayerSeasonStat.SeasonTransfermarktId == "ges" ? "Overall Career Stats" : $"Stats Season ({selectedPlayerSeasonStat.SeasonTransfermarktId})")
                        </MudText>
                        <MudSpacer />
                        <MudIcon Icon="@(IsPlayerSeasonOverallStatSelected ? Icons.Material.Filled.ArrowDropUp : Icons.Material.Filled.ArrowDropDown)"
                                 Color="Color.Primary"
                                 Size="Size.Large" />
                    </MudStack>
                </MudListSubheader>
                <MudCollapse Expanded="@IsPlayerSeasonOverallStatSelected">
                    <MudTable Items="@selectedPlayerSeasonStat.PlayerSeasonCompetitionStats"
                              T="PlayerSeasonCompetitionStatResponse"
                              Dense="true">
                        <HeaderContent>
                            <MudTh>Competition</MudTh>
                            <MudTh>Appearances</MudTh>
                            @if (Domain.Enums.Extensions.PositionExtensions.ToEnum(selectedPlayer.Position) != Domain.Enums.Position.Goalkeeper)
                            {
                                <MudTh>Goals</MudTh>
                            }
                            <MudTh>Assists</MudTh>
                            <MudTh>Own Goals</MudTh>
                            <MudTh>Substitutions On</MudTh>
                            <MudTh>Substitutions Off</MudTh>
                            <MudTh>Yellow Cards</MudTh>
                            <MudTh>Second Yellow Cards</MudTh>
                            <MudTh>Red Cards</MudTh>
                            @if (Domain.Enums.Extensions.PositionExtensions.ToEnum(selectedPlayer.Position) != Domain.Enums.Position.Goalkeeper)
                            {
                                <MudTh>Penalty Goals</MudTh>
                                <MudTh>Minutes per Goal</MudTh>
                            }
                            else
                            {
                                <MudTh>Goals Conceded</MudTh>
                                <MudTh>Clean Sheets</MudTh>
                            }
                            <MudTh>Minutes Played</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="playerSeasonCompetitionStat">
                            <MudTd>
                                <MudStack Row="true">
                                    <MudAvatar>
                                        <MudImage Src="@playerSeasonCompetitionStat.CompetitionLogo" Alt="@playerSeasonCompetitionStat.CompetitionName" />
                                    </MudAvatar>
                                    <MudText Typo="Typo.subtitle2" Class="mt-3">
                                        @playerSeasonCompetitionStat.CompetitionName
                                    </MudText>

                                </MudStack>
                            </MudTd>
                            <MudTd>@playerSeasonCompetitionStat.Appearances</MudTd>
                            @if (Domain.Enums.Extensions.PositionExtensions.ToEnum(selectedPlayer.Position) != Domain.Enums.Position.Goalkeeper)
                            {
                                <MudTd>@playerSeasonCompetitionStat.Goals</MudTd>
                            }
                            <MudTd>@playerSeasonCompetitionStat.Assists</MudTd>
                            <MudTd>@playerSeasonCompetitionStat.OwnGoals</MudTd>
                            <MudTd>@playerSeasonCompetitionStat.SubstitutionsOn</MudTd>
                            <MudTd>@playerSeasonCompetitionStat.SubstitutionsOff</MudTd>
                            <MudTd>@playerSeasonCompetitionStat.YellowCards</MudTd>
                            <MudTd>@playerSeasonCompetitionStat.SecondYellowCards</MudTd>
                            <MudTd>@playerSeasonCompetitionStat.RedCards</MudTd>
                            @if (Domain.Enums.Extensions.PositionExtensions.ToEnum(selectedPlayer.Position) != Domain.Enums.Position.Goalkeeper)
                            {
                                <MudTd>@playerSeasonCompetitionStat.PenaltyGoals</MudTd>
                                <MudTd>@playerSeasonCompetitionStat.MinutesPerGoal</MudTd>
                            }
                            else
                            {
                                <MudTd>@playerSeasonCompetitionStat.GoalsConceded</MudTd>
                                <MudTd>@playerSeasonCompetitionStat.CleanSheets</MudTd>
                            }
                            <MudTd>@playerSeasonCompetitionStat.MinutesPlayed</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCollapse>
            </MudListItem>
        </MudList>

        @if (selectedPlayerSeasonStat.SeasonTransfermarktId != "ges" &&
      selectedPlayerStat.PlayerSeasonStats.Any(
          playerSeasonStat => playerSeasonStat.IsScraped && playerSeasonStat.SeasonTransfermarktId.Equals(selectedPlayerSeasonStat.SeasonTransfermarktId)))
        {
            @foreach (var playerSeasonCompetitionStat in GetPlayerSeasonCompetitionStats(selectedPlayerSeasonStat))
            {
                <MudList Dense="true" Gutters="true" T="PlayerSeasonCompetitionStatResponse">
                    <MudListItem Ripple="false">
                        <MudListSubheader @onclick="() => TogglePlayerSeasonCompetitionStatExpansion(playerSeasonCompetitionStat)">
                            <MudStack Row="true" AlignItems="AlignItems.Center">
                                <MudAvatar Size="Size.Large">
                                    <MudImage Src="@playerSeasonCompetitionStat.CompetitionLogo" Alt="@playerSeasonCompetitionStat.CompetitionName" />
                                </MudAvatar>
                                <MudSpacer />
                                <MudText Typo="Typo.h6">@playerSeasonCompetitionStat.CompetitionName</MudText>
                                <MudSpacer />
                                <MudIcon Icon="@(expandedPlayerSeasonCompetitionStats.Contains(playerSeasonCompetitionStat) ? Icons.Material.Filled.ArrowDropUp : Icons.Material.Filled.ArrowDropDown)"
                                         Color="Color.Primary"
                                         Size="Size.Large" />
                            </MudStack>
                        </MudListSubheader>
                        <MudCollapse Expanded="@expandedPlayerSeasonCompetitionStats.Contains(playerSeasonCompetitionStat)">
                            <MudTable Items="@playerSeasonCompetitionStat.PlayerSeasonCompetitionMatchStats"
                                      T="PlayerSeasonCompetitionMatchStatResponse"
                                      Dense="true">
                                <HeaderContent>
                                    <MudTh>MatchDay</MudTh>
                                    <MudTh>Date</MudTh>
                                    <MudTh>Home Team</MudTh>
                                    <MudTh>Away Team</MudTh>
                                    <MudTh>Result</MudTh>
                                    <MudTh>Position</MudTh>
                                    <MudTh>Goals</MudTh>
                                    <MudTh>Assists</MudTh>
                                    <MudTh>Own Goals</MudTh>
                                    <MudTh>Yellow Cards</MudTh>
                                    <MudTh>Second Yellow Cards</MudTh>
                                    <MudTh>Substituted On</MudTh>
                                    <MudTh>Substituted Off</MudTh>
                                    <MudTh>Minutes Played</MudTh>
                                </HeaderContent>
                                <RowTemplate Context="playerSeasonCompetitionMatchStat">
                                    <MudTd>@playerSeasonCompetitionMatchStat.MatchDay</MudTd>
                                    <MudTd>@playerSeasonCompetitionMatchStat.Date</MudTd>
                                    <MudTd>
                                        <MudAvatar Size="Size.Small">
                                            <MudImage Src="@playerSeasonCompetitionMatchStat.HomeClubLogo" Alt="@playerSeasonCompetitionMatchStat.HomeClubName" />
                                        </MudAvatar>
                                        @playerSeasonCompetitionMatchStat.HomeClubName
                                    </MudTd>
                                    <MudTd>
                                        <MudAvatar Size="Size.Small">
                                            <MudImage Src="@playerSeasonCompetitionMatchStat.AwayClubLogo" Alt="@playerSeasonCompetitionMatchStat.AwayClubName" />
                                        </MudAvatar>
                                        @playerSeasonCompetitionMatchStat.AwayClubName
                                    </MudTd>
                                    <MudTd>
                                        @{
                                            var result = $"{playerSeasonCompetitionMatchStat.HomeClubGoals} : {playerSeasonCompetitionMatchStat.AwayClubGoals}";
                                            Color resultTextColor = playerSeasonCompetitionMatchStat.MatchResult switch
                                            {
                                                Domain.Enums.MatchResult.Win => Color.Success,
                                                Domain.Enums.MatchResult.Draw => Color.Primary,
                                                Domain.Enums.MatchResult.Loss => Color.Error,
                                                _ => Color.Default
                                            };
                                        }

                                        <MudText Color="@resultTextColor">@result</MudText>

                                        @if (playerSeasonCompetitionMatchStat.IsResultAddition)
                                        {
                                            <MudText>AET</MudText>
                                        }
                                        @if (playerSeasonCompetitionMatchStat.IsResultPenalties)
                                        {
                                            <MudText>on pens</MudText>
                                        }
                                    </MudTd>
                                    @if (playerSeasonCompetitionMatchStat.NotPlayingReason == Domain.Enums.NotPlayingReason.None)
                                    {
                                        <MudTd>@playerSeasonCompetitionMatchStat.Position</MudTd>
                                        <MudTd>@playerSeasonCompetitionMatchStat.Goals</MudTd>
                                        <MudTd>@playerSeasonCompetitionMatchStat.Assists</MudTd>
                                        <MudTd>@playerSeasonCompetitionMatchStat.OwnGoals</MudTd>
                                        <MudTd>@($"{playerSeasonCompetitionMatchStat.YellowCard}'")</MudTd>
                                        <MudTd>@($"{playerSeasonCompetitionMatchStat.SecondYellowCard}'")</MudTd>
                                        <MudTd>@($"{playerSeasonCompetitionMatchStat.RedCard}'")</MudTd>
                                        <MudTd>@($"{playerSeasonCompetitionMatchStat.SubstitutedOn}'")</MudTd>
                                        <MudTd>@($"{playerSeasonCompetitionMatchStat.SubstitutedOff}'")</MudTd>
                                        <MudTd>@($"{playerSeasonCompetitionMatchStat.MinutesPlayed}'")</MudTd>
                                    }
                                    else
                                    {
                                        <MudTd>
                                            @(Domain.Enums.Extensions.NotPlayingReasonExtension.ToString(playerSeasonCompetitionMatchStat.NotPlayingReason))
                                        </MudTd>
                                    }
                                </RowTemplate>
                            </MudTable>
                        </MudCollapse>
                    </MudListItem>
                </MudList>
            }
        }
    }
}

@code {
    [Parameter]
    public string playerTransfermarktId { get; set; } = default!;

    private PlayerResponse? selectedPlayer = null!;
    private PlayerStatResponse? selectedPlayerStat = null!;
    private PlayerSeasonStatResponse? selectedPlayerSeasonStat;

    private HashSet<PlayerSeasonCompetitionStatResponse> expandedPlayerSeasonCompetitionStats = new();

    private bool IsPlayerSeasonOverallStatSelected = true;

    public string[] XAxisLabels { get; set; } = Array.Empty<string>();
    private List<ChartSeries> Series = new();
    private ChartOptions Options = new();
    private AxisChartOptions AxisOptions = new();

    public async Task ForceOnInitializedAsync()
    {
        selectedPlayer = null;
        selectedPlayerStat = null;
        selectedPlayerSeasonStat = null;
        expandedPlayerSeasonCompetitionStats = new();

        await OnInitializedAsync();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        PageReferenceService.CurrentPage = this;
        selectedPlayer = ItemSelectionService.SelectedPlayer;

        if (selectedPlayer != null)
        {
            var seasonTransfermarktId = "ges";

            var scrapedPlayerSeasonStat = await ScrapePlayerStatsAsync(seasonTransfermarktId);

            if (scrapedPlayerSeasonStat != null)
            {
                if (selectedPlayerStat == null)
                {
                    selectedPlayerStat = scrapedPlayerSeasonStat.First();
                }
                else
                {
                    var existingPlayerSeasonStatIndex = selectedPlayerStat.PlayerSeasonStats
                        .FindIndex(playerSeasonStat => playerSeasonStat.SeasonTransfermarktId.Equals(seasonTransfermarktId));

                    if (existingPlayerSeasonStatIndex >= 0)
                    {
                        selectedPlayerSeasonStat = scrapedPlayerSeasonStat.First().PlayerSeasonStats.First(
                            playerSeasonStat => playerSeasonStat.SeasonTransfermarktId.Equals(seasonTransfermarktId));

                        selectedPlayerStat.PlayerSeasonStats[existingPlayerSeasonStatIndex] = selectedPlayerSeasonStat;
                    }
                }
            }
        }
    }

    private async Task OnSelectedPlayerSeasonStatAsync(PlayerSeasonStatResponse? playerSeasonStat)
    {
        if (playerSeasonStat != null)
        {
            var seasonTransfermarktId = playerSeasonStat.SeasonTransfermarktId;

            var scrapedPlayerSeasonStat = await ScrapePlayerStatsAsync(seasonTransfermarktId);

            if (selectedPlayerStat!= null && scrapedPlayerSeasonStat != null)
            {
                var existingPlayerSeasonStatIndex = selectedPlayerStat.PlayerSeasonStats
                    .FindIndex(playerSeasonStat => playerSeasonStat.SeasonTransfermarktId.Equals(seasonTransfermarktId));

                if (existingPlayerSeasonStatIndex >= 0)
                {
                    selectedPlayerSeasonStat = scrapedPlayerSeasonStat.First().PlayerSeasonStats.First(
                        playerSeasonStat => playerSeasonStat.SeasonTransfermarktId.Equals(seasonTransfermarktId));

                    selectedPlayerStat.PlayerSeasonStats[existingPlayerSeasonStatIndex] = selectedPlayerSeasonStat;
                }
            }
        }
    }

    private void TogglePlayerSeasonCompetitionStatExpansion(PlayerSeasonCompetitionStatResponse playerSeasonCompetitionStat)
    {
        if (!expandedPlayerSeasonCompetitionStats.Add(playerSeasonCompetitionStat))
        {
            expandedPlayerSeasonCompetitionStats.Remove(playerSeasonCompetitionStat);
        }
    }

    protected override void OnParametersSet()
    {
        if (selectedPlayer != null && selectedPlayer.MarketValues != null && selectedPlayer.MarketValues.Any())
        {
            var dates = selectedPlayer.MarketValues.Select(mv => mv.Date);
            var yearsMonths = dates.Select(date => string.Concat(date.Month, "/", date.Year.ToString())).ToList();
            XAxisLabels = yearsMonths.ToArray();

            var seriesData = selectedPlayer.MarketValues.Select(mv => (double)mv.Value).ToArray();

            Series = new List<ChartSeries>
            {
                new ChartSeries
                {
                    DataMarkerTooltipYValueFormat = String.Format("C2"),
                    DataMarkerTooltipSubtitleFormat = "{{X_VALUE}}",
                    Name = "Market Value (â‚¬)",
                    Data = seriesData,
                    ShowDataMarkers = true,        
                }
            };

            AxisOptions = new AxisChartOptions
            {
                XAxisLabelRotation = 20
            };

            Options = new ChartOptions
            {
                YAxisRequireZeroPoint = true,
                YAxisTicks = 10000,
                YAxisFormat = "N0",
            };
        }
    }

    private IEnumerable<PlayerSeasonCompetitionStatResponse> GetPlayerSeasonCompetitionStats(PlayerSeasonStatResponse playerSeasonStatResponse)
    {
        if (selectedPlayerStat == null)
        {
            return Enumerable.Empty<PlayerSeasonCompetitionStatResponse>();
        }

        var playerSeasonStat = selectedPlayerStat.PlayerSeasonStats.First(
            playerSeasonStat => playerSeasonStat.SeasonTransfermarktId.Equals(playerSeasonStatResponse.SeasonTransfermarktId));

        return playerSeasonStat.PlayerSeasonCompetitionStats ?? Enumerable.Empty<PlayerSeasonCompetitionStatResponse>();
    }

    private async Task<IEnumerable<PlayerStatResponse>?> ScrapePlayerStatsAsync(string seasonTransfermarktId)
    {
        if (selectedPlayer == null)
        {
            return Enumerable.Empty<PlayerStatResponse>();
        }

        var playerStatRequest = new PlayerStatRequest()
        {
            PlayerTransfermarktId = playerTransfermarktId,
            SeasonTransfermarktId = seasonTransfermarktId,
            Position = selectedPlayer.Position,
            IncludeAllPlayerTransfermarktSeasons = false
        };

        var playerStatRequests = new List<PlayerStatRequest> { playerStatRequest };

        var playerStatResponses = await PlayerStatClient.GetPlayerStatsAsync(playerStatRequests);

        return playerStatResponses;              
    }
}
